# ===============================
# Docker Compose for Retail Platform
# Merged JWT Service + User Service
# ===============================

services:

  # ===============================
  # Redis Service
  # ===============================
  redis:
    image: redis:7
    container_name: ${REDIS_SERVICE_NAME}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # Optional: remove if not needed externally
    networks:
      - retail-platform
    restart: unless-stopped
    command: redis-server
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: ${REDIS_HEALTHCHECK_INTERVAL}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT}
      retries: ${REDIS_HEALTHCHECK_RETRIES}

  # ===============================
  # User Database (Postgres)
  # ===============================
  user-db:
    image: postgres:15
    container_name: ${USER_DB_SERVICE_NAME}
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "${USER_DB_PORT}:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - retail-platform
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      retries: 10
      timeout: 5s

  # ===============================
  # User Service
  # ===============================
  user-service:
    build:
      context: .
      dockerfile: ${USER_SERVICE_DOCKERFILE}
    container_name: ${USER_SERVICE_NAME}
    env_file:
      - .env
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    depends_on:
      user-db:
        condition: service_healthy
    environment:
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      SPRING_DATASOURCE_URL: ${USER_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SERVER_PORT: ${USER_SERVICE_PORT}
      OTEL_COLLECTOR_ENDPOINT: ${OTEL_COLLECTOR_ENDPOINT}
      OBSERVABILITY_CORRELATION_ID_HEADER: ${OBSERVABILITY_CORRELATION_ID_HEADER}
      OTEL_RESOURCE_ATTRIBUTES: ${OTEL_RESOURCE_ATTRIBUTES}
      OTEL_METRICS_EXPORTER: ${OTEL_METRICS_EXPORTER}
      OTEL_TRACES_EXPORTER: ${OTEL_TRACES_EXPORTER}
      LOG_LEVEL_ROOT: ${USER_SERVICE_LOG_LEVEL_ROOT}
      LOG_LEVEL_SPRING: ${USER_SERVICE_LOG_LEVEL_SPRING}
      LOG_LEVEL_SPRING_SECURITY: ${USER_SERVICE_LOG_LEVEL_SPRING_SECURITY}
      LOG_LEVEL_SPRING_SECURITY_WEB: ${USER_SERVICE_LOG_LEVEL_SPRING_SECURITY_WEB}
      LOG_LEVEL_FILTER_CHAIN: ${USER_SERVICE_LOG_LEVEL_FILTER_CHAIN}
      LOG_LEVEL_AUTHENTICATION: ${USER_SERVICE_LOG_LEVEL_AUTHENTICATION}
      LOG_LEVEL_APP: ${USER_SERVICE_LOG_LEVEL_APP}
      LOG_PATTERN_CONSOLE: ${USER_SERVICE_LOG_PATTERN_CONSOLE}
      SPRINGDOC_API_DOCS_PATH: ${SPRINGDOC_API_DOCS_PATH}
      SPRINGDOC_SWAGGER_UI_PATH: ${SPRINGDOC_SWAGGER_UI_PATH}
      MANAGEMENT_ENDPOINTS: ${MANAGEMENT_ENDPOINTS}
      MANAGEMENT_HEALTH_SHOW_DETAILS: ${MANAGEMENT_HEALTH_SHOW_DETAILS}
      MANAGEMENT_PROMETHEUS_ACCESS: ${MANAGEMENT_PROMETHEUS_ACCESS}
      MANAGEMENT_METRICS_ENABLED: ${MANAGEMENT_METRICS_ENABLED}
    restart: unless-stopped
    volumes:
      - maven-repo:/root/.m2
      - ${USER_SERVICE_LOGS}:${USER_SERVICE_LOG_PATH}
    networks:
      - retail-platform
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${USER_SERVICE_PORT}/actuator/health || exit 1"]
      interval: ${USER_SERVICE_HEALTHCHECK_INTERVAL}
      retries: ${USER_SERVICE_HEALTHCHECK_RETRIES}
      timeout: ${USER_SERVICE_HEALTHCHECK_TIMEOUT}

  # ===============================
  # JWT Service
  # ===============================
  jwt-service:
    build:
      context: .
      dockerfile: ${JWT_SERVICE_DOCKERFILE}
    container_name: ${JWT_SERVICE_NAME}
    env_file:
      - .env
    ports:
      - "${JWT_SERVICE_PORT}:${JWT_SERVICE_PORT}"
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      REDIS_HOST: ${REDIS_SERVICE_NAME}
      REDIS_PORT: ${REDIS_PORT}
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SERVER_PORT: ${JWT_SERVICE_PORT}
      LOG_PATH: ${JWT_SERVICE_LOG_PATH}
      LOG_LEVEL_ROOT: ${JWT_SERVICE_LOG_LEVEL_ROOT}
      LOG_LEVEL_SPRING: ${JWT_SERVICE_LOG_LEVEL_SPRING}
      LOG_LEVEL_SPRING_SECURITY: ${JWT_SERVICE_LOG_LEVEL_SPRING_SECURITY}
      LOG_LEVEL_SPRING_SECURITY_WEB: ${JWT_SERVICE_LOG_LEVEL_SPRING_SECURITY_WEB}
      LOG_LEVEL_FILTER_CHAIN: ${JWT_SERVICE_LOG_LEVEL_FILTER_CHAIN}
      LOG_LEVEL_AUTHENTICATION: ${JWT_SERVICE_LOG_LEVEL_AUTHENTICATION}
      LOG_LEVEL_APP: ${JWT_SERVICE_LOG_LEVEL_APP}
      LOG_PATTERN_CONSOLE: ${JWT_SERVICE_LOG_PATTERN_CONSOLE}
    restart: unless-stopped
    volumes:
      - maven-repo:/root/.m2
      - ${JWT_SERVICE_LOGS}:${JWT_SERVICE_LOG_PATH}
    networks:
      - retail-platform
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${JWT_SERVICE_PORT}/actuator/health || exit 1"]
      interval: ${JWT_SERVICE_HEALTHCHECK_INTERVAL}
      retries: ${JWT_SERVICE_HEALTHCHECK_RETRIES}
      timeout: ${JWT_SERVICE_HEALTHCHECK_TIMEOUT}

# ===============================
# Volumes
# ===============================
volumes:
  user-db-data:
  maven-repo:

# ===============================
# Networks
# ===============================
networks:
  retail-platform:
    external: true
