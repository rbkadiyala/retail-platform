services:
  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - retail-platform
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB_NAME}"]
      interval: 10s
      retries: 10
      timeout: 5s

  user-service:
    build:
      context: .                      
      dockerfile: user-service/Dockerfile
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    depends_on:
      user-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${USER_DB_URL}
      SPRING_DATASOURCE_USERNAME: ${USER_DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
      SPRING_JPA_SHOW_SQL: ${SPRING_JPA_SHOW_SQL}
      SERVER_PORT: ${USER_SERVICE_PORT}
      OTEL_COLLECTOR_ENDPOINT: ${OTEL_COLLECTOR_ENDPOINT}
    restart: unless-stopped
    volumes:
      - maven-repo:/root/.m2
      - ./user-logs:/app/logs   # Persist logs
    networks:
      - retail-platform

volumes:
  user-db-data:
  maven-repo:

networks:
  retail-platform:
    external: true
